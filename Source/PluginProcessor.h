/*
  ==============================================================================

    This file was auto-generated by the Introjucer!

    It contains the basic framework code for a JUCE plugin processor.

  ==============================================================================
*/

#ifndef PLUGINPROCESSOR_H_INCLUDED
#define PLUGINPROCESSOR_H_INCLUDED

#include "../JuceLibraryCode/JuceHeader.h"
#include "TeragonGuiComponents.h"
#include "Resources.h"
#include "convClass/StereoHeadTailPartConv.h"
#include "BformatClass/BFormatWavLoader.h"
#include "BformatClass/VMS.h"


//==============================================================================
/**
*/
class BVerbAudioProcessor  : public AudioProcessor,
                             public teragon::ParameterObserver
{
public:
    //==============================================================================
    BVerbAudioProcessor();
    ~BVerbAudioProcessor();

    //==============================================================================
    void prepareToPlay (double sampleRate, int samplesPerBlock) override;
    void releaseResources() override;

    void processBlock (AudioSampleBuffer&, MidiBuffer&) override;

    //==============================================================================
    AudioProcessorEditor* createEditor() override;
    bool hasEditor() const override;

    //==============================================================================
    const String getName() const override;

    bool acceptsMidi() const override;
    bool producesMidi() const override;
    bool silenceInProducesSilenceOut() const override { return false; }
    double getTailLengthSeconds() const override{ return 0.0; }
    
    //==============================================================================
    int getNumParameters() override;
    float getParameter(int index) override;
    void setParameter(int index, float newValue) override;
    const String getParameterName(int index) override;
    const String getParameterText(int index) override;
    bool isMetaParameter(int parameterIndex) const override;

    //==============================================================================
    int getNumPrograms() override;
    int getCurrentProgram() override {return 0;}
    void setCurrentProgram (int index) override {}
    const String getProgramName (int index) override {return String();}
    void changeProgramName (int index, const String& newName) override {};

    //==============================================================================
    void getStateInformation (MemoryBlock& destData) override;
    void setStateInformation (const void* data, int sizeInBytes) override;

    //===================== PluginParameterObserver methods ========================
    virtual bool isRealtimePriority() const override { return true; }
    virtual void onParameterUpdated(const teragon::Parameter *parameter) override;
    
    //==============================================================================
    void setDummyIndex(int index){ dummyIndex = index;};
    int getDummyIndex(){ return dummyIndex;};
    int getNonDummyIndex(){ return 1 - dummyIndex;};
    
public:
    OwnedArray<StereoHeadTailPartConv>      convkernells;
    ScopedPointer<BFormatWavLoader>         IRLoader;
    ScopedPointer<VMS>                      virtualMicSynthL,virtualMicSynthR;
    bool                                    changeConvKernellFlag;
    bool                                    prepareForFutureSynthFlag;
private:
    teragon::ConcurrentParameterSet         parameters;
    ScopedPointer<RemainBuffer>             remainBuffer;
    ScopedPointer<AccuBuffer>               accBuff;
    int                                     dummyIndex;
    //==============================================================================
    JUCE_DECLARE_NON_COPYABLE_WITH_LEAK_DETECTOR (BVerbAudioProcessor)
};


#endif  // PLUGINPROCESSOR_H_INCLUDED
